/**
 * This file auto-generated by Fern from our API Definition.
 */

export interface DataStatus<RawValue extends DataStatus.RawValue = DataStatus.RawValue> {
  value: RawValue;
  visit: <Result>(visitor: DataStatus._Visitor<Result>) => Result;
}

const _Synced: DataStatus<"SYNCED"> = {
  value: "SYNCED",
  visit: (visitor) => visitor.synced(),
};
const _InProgress: DataStatus<"IN_PROGRESS"> = {
  value: "IN_PROGRESS",
  visit: (visitor) => visitor.inProgress(),
};
const _NotSupported: DataStatus<"NOT_SUPPORTED"> = {
  value: "NOT_SUPPORTED",
  visit: (visitor) => visitor.notSupported(),
};
const _NotSynced: DataStatus<"NOT_SYNCED"> = {
  value: "NOT_SYNCED",
  visit: (visitor) => visitor.notSynced(),
};
const _PartialSynced: DataStatus<"PARTIAL_SYNCED"> = {
  value: "PARTIAL_SYNCED",
  visit: (visitor) => visitor.partialSynced(),
};
export const DataStatus = {
  Synced: _Synced,
  InProgress: _InProgress,
  NotSupported: _NotSupported,
  NotSynced: _NotSynced,
  PartialSynced: _PartialSynced,
  _parse: (value: string): DataStatus => {
    switch (value) {
      case "SYNCED": {
        return _Synced;
      }
      case "IN_PROGRESS": {
        return _InProgress;
      }
      case "NOT_SUPPORTED": {
        return _NotSupported;
      }
      case "NOT_SYNCED": {
        return _NotSynced;
      }
      case "PARTIAL_SYNCED": {
        return _PartialSynced;
      }
      default: {
        return {
          value: value as DataStatus.RawValue,
          visit: (visitor) => visitor._other(value),
        };
      }
    }
  },
} as const;

export declare namespace DataStatus {
  type RawValue = "SYNCED" | "IN_PROGRESS" | "NOT_SUPPORTED" | "NOT_SYNCED" | "PARTIAL_SYNCED";

  interface _Visitor<Result> {
    synced: () => Result;
    inProgress: () => Result;
    notSupported: () => Result;
    notSynced: () => Result;
    partialSynced: () => Result;
    _other: (value: string) => Result;
  }
}
